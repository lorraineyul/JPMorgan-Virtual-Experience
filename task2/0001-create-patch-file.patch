From be4d60defe59a68ddd90e3dd9551b2cdd2724112 Mon Sep 17 00:00:00 2001
From: sakshi agarwal <agarwalsakshi368@gmail.com>
Date: Mon, 18 May 2020 01:03:44 +0530
Subject: [PATCH] create patch file

---
 datafeed/server3.py |  2 +-
 src/App.tsx         | 33 ++++++++++++++++++++++++++++++---
 src/DataStreamer.ts |  2 +-
 src/Graph.tsx       | 21 ++++++++++++++++++---
 4 files changed, 50 insertions(+), 8 deletions(-)

diff --git a/datafeed/server3.py b/datafeed/server3.py
index 2de4e28..82fda14 100644
--- a/datafeed/server3.py
+++ b/datafeed/server3.py
@@ -202,7 +202,7 @@ def get(req_handler, routes):
                 req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+def run(routes, host = '0.0.0.0', port = 9999):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..28cb732 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -6,14 +6,19 @@ import './App.css';
 /**
  * State declaration for <App />
  */
+ 
+ //showGraph property added
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean
 }
 
 /**
  * The parent element of the react app.
  * It renders title, button and Graph react element.
  */
+ 
+ //initial state of app is defined
 class App extends Component<{}, IState> {
   constructor(props: {}) {
     super(props);
@@ -22,24 +27,46 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph : false,
     };
   }
 
   /**
    * Render Graph react component with state.data parse as property data
    */
+   
+   // Graph rendered contunously
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if ( this.state.showGraph )
+    {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
+   
+  // getDataFromServer function updated to perform the required work
   getDataFromServer() {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+
+      let count = 0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds : ServerRespond[]) => {
+          this.setState({
+            data: serverResponds,
+            showGraph: true
+          });
+        });
+        count++;
+        if(count > 1000)
+        {
+          clearInterval(interval);
+        }
+      }, 100);
     });
   }
 
@@ -71,4 +98,4 @@ class App extends Component<{}, IState> {
   }
 }
 
-export default App;
+export default App;
\ No newline at end of file
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..40b0a20 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -15,7 +15,7 @@ export interface ServerRespond {
 
 class DataStreamer {
   // The url where datafeed server is listening
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = 'http://localhost:9999/query?id=1';
 
   /**
    * Send request to the datafeed server and executes callback function on success
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..afb3cb8 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,9 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+ 
+ // HTMLElement extension added
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +34,9 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+	
+	// updating componentDidMount because extension added
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +53,17 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+	  
+	  // Adding more attributes
+	  elem.setAttribute('view', 'y_line');
+	  elem.setAttribute('column-pivots', '["stock"]');
+	  elem.setAttribute('row-pivots', '["timestamp"]');
+	  elem.setAttribute('columns', '["top_ask_price"]');
+	  elem.setAttribute('aggregates', `
+	  {"stock":"distinct count",
+		  "top_ask_price":"avg",
+		  "top_bid_price":"avg",
+		  "timestamp":"distinct count"}`);
     }
   }
 
@@ -70,4 +85,4 @@ class Graph extends Component<IProps, {}> {
   }
 }
 
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.26.2.windows.1

